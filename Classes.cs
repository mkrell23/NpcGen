// Generated by https://quicktype.io

namespace NpcGen
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Classes
    {
        [JsonProperty("index")]
        public string Index { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("hit_die")]
        public long HitDie { get; set; }

        [JsonProperty("proficiency_choices")]
        public ProficiencyChoice[] ProficiencyChoices { get; set; }

        [JsonProperty("proficiencies")]
        public Proficiency[] Proficiencies { get; set; }

        [JsonProperty("saving_throws")]
        public Proficiency[] SavingThrows { get; set; }

        [JsonProperty("starting_equipment")]
        public ClassLevels StartingEquipment { get; set; }

        [JsonProperty("class_levels")]
        public ClassLevels ClassLevels { get; set; }

        [JsonProperty("subclasses")]
        public Proficiency[] Subclasses { get; set; }

        [JsonProperty("spellcasting")]
        public ClassLevels Spellcasting { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    public partial class ClassLevels
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("class", NullValueHandling = NullValueHandling.Ignore)]
        public string Class { get; set; }
    }

    public partial class Proficiency
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    public partial class ProficiencyChoice
    {
        [JsonProperty("choose")]
        public long Choose { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("from")]
        public Proficiency[] From { get; set; }
    }

    public enum TypeEnum { Proficiencies };

    public partial class Classes
    {
        public static Classes[] FromJson(string json) => JsonConvert.DeserializeObject<Classes[]>(json, NpcGen.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Classes[] self) => JsonConvert.SerializeObject(self, NpcGen.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "proficiencies")
            {
                return TypeEnum.Proficiencies;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Proficiencies)
            {
                serializer.Serialize(writer, "proficiencies");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
